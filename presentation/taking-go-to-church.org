#+reveal_root: https://cdn.jsdelivr.net/npm/reveal.js
#+reveal_theme: beige
#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:nil broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:nil e:t email:nil f:t inline:t num:nil
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:nil title:t toc:nil todo:t |:t
#+title:  Taking Go to Church
#+subtitle:Go and the Lambda Calculus
#+author: Geoffrey J. Teale
#+email: tealeg@gmail.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 29.1 (Org mode 9.6.6)
#+cite_export:

* Taking Go to Church
(No, not *that* kind of church..)

* Who am I? 
** Geoffrey Teale (tealeg)
- [[https://github.com/tealeg][https://github.com/tealeg]]  [[./github.svg]]
- [[https://mastodon.online/@tealeg][@tealeg@mastodon.online]] [[./mastodon.png]]

** A proud gopher since November 10th 2009
                   [[./megopher.png]]

** A Head of Engineering @ Upvest 
                   [[./logo.png]]
https://upvest.co

https://www.linkedin.com/in/geoffteale/  [[./linkedin.svg]]

** Slides and source code
#+begin_src sh
git clone git@github.com:tealeg/go-lambda-calculus.git
#+end_src

* This presentation isn't about AWS Lambda
** Sorry if you were expecting that.
** You'll see why it's called "Lambda" though.
  
* A question that comes up a lot in Go
** "Is Go an object oriented language?"
** Lets get a quick vote on that?
** I'm not here to answer that question
** .. but the answer is, "not especially"
** Questions that come up less often are ...
** "Is Go an untyped language?"
** "Is go a functional programming language?"
** What do you think?
** These don't seem like interesting questions.
** Let's ask something more fundamental
** What is the minimum set of primitives you can do useful work with in Go?
This is rhetoric, don't answer it yet!
** What is the most powerful abstraction in Go?
.. more rhetoric... 
** How can we derive complex behaviour from simple primitives?
.. rhetoric, but a bit grander in scope.. 
** How is a self-aware "being" built from atoms?
[[./dog-shock.gif]]

** I'm not going to over-promise on that last question :-) 

*  Why am I even thinking about this?
** I've got over 40 years programming behind me
** Now, I'm more interested in fundamentals
** That last question is important.
** Large language models alone won't get us to AGI
** What clues do we have?

* Why am I talking to Go programmers about this?
** What ideas you're exposed to tends to depend on:
- how and where you learned to program
- what languages you work with

** I want to expose you to ideas that don't crop up in the Go world

** So let's explore!

* Things people in the Go world rarely talk about.
** Who knows what this is?
#+begin_quote
Y = λf.(λx.f (x x))(λx.f (x x))
#+end_quote

** It's an algorithm, in a weird syntax
- We'll find out what it does later

* Lambda Calculus
** A formal system, in mathematical terms
** ... but essentially a programming language
** ... created before computers existed

* We're not going to go very deep
** We don't have much time, and it would *hurt*.
[[./otter-fright.gif]]
* OK.  Now to some Go:

** First a type

#+begin_src go-ts
type λ func(l λ) λ
#+end_src

** We asked "Is Go an untyped language?"

** No, but imagine a world where you only have this type!
#+begin_src go-ts
type λ func(l λ) λ
#+end_src

* Checkpoint:
** Is everyone familiar with the notion of a closure?

#+BEGIN_src go-ts
  func makeClosure() func() int {
          x := 4
          return func() int { return x }
  }

  a := makeClosure()
  a() // => 4
#+END_SRC

* Pop Quiz: 1
** Who's this?
[[./curry-photo.jpg]]

** Haskell Curry (1900-1982)
** What's named after him?
[[./curry-photo.jpg]]


** Yes, the programming language "Haskell"
** But also.. Currying
Currying is the technique of translating the evaluation of a function
that takes multiple arguments into evaluating a sequence of functions,
each with a single argument.

** Currying
an equivalency:

#+BEGIN_src go-ts
x := f(a, b, c)
x := f(a)(b)(c)
#+END_SRC

We need to know that to understand the next piece


** Actually, he didn't invent it.

** Moses Schönfinkel
Curry actually attributed the idea to Schönfinkel who had done it 6
years earlier.

[[./schoenfinkel.jpg]]

** Gottlob Frege 
... but actually Frege had already found it before him.
[[./frege.jpg]]


* Lambda Calculus syntax in our Go world
** Translation (1)
#+begin_src 
λa.a
#+end_src
Translates to
#+BEGIN_SRC go-ts
  func(a λ) λ { return a }
#+END_SRC
** Translation (2)
#+begin_src 
λa.(λb.ba)
#+end_src
Translates to
#+begin_src go-ts
  func(a λ) λ {
	  return func(b λ) λ {
		  return b(a)
	  }
  }
#+end_src
** Translation (3)
A "shorthand".
Exactly equivalent to the previous case:
#+begin_src 
λab.ba
#+end_src
Translates to
#+begin_src go-ts
  func(a λ) λ {
	  return func(b λ) λ {
		  return b(a)
	  }
  }
#+end_src
** Translation (4)
Parenthesis mean what you think they mean :-) 
#+begin_src 
λab.(bb)(aa)
#+end_src
Translates to
#+begin_src go-ts
  func(a λ) λ {
    return func(b λ) λ {
	return (b(b))(a(a))
    }
  }
#+end_src
** We need a closure as a bridge
#+BEGIN_SRC go-ts

     func makeCounter() (λ, func(), func()) {
	     var i int = 0

	     // We'll define inc, get and reset here

	     return inc, get, reset
     }

#+END_SRC

** The increment function
#+begin_src go-ts
  inc := func(f λ) λ{
	  i = i + 1
	  return f	
  }
#+end_src

** The get function
#+begin_src go-ts
  get := func() int {
	  return i
  }
#+end_src

** The reset function
#+begin_src go-ts
  reset := func() {
	  i = 0
  }
#+end_src

** Try to remember...
Remember =inc= and =get!=
These functions returned by =makeCounter= are our bridge back to normal, typed Go.

* A curried function
- But what does it do?

#+BEGIN_src go-ts
  // λ ab.b
  x := func(a λ) λ {
          return func(b λ) λ {
                  return b
          }
  }

#+END_SRC

** It's part of sequence, here's the next one

#+BEGIN_src go-ts
  // λ ab.ab
  y := func(a λ) λ {
	  return func(b λ) λ {
		  return a(b)
	  }
  }

  
#+END_SRC
** ... and a third
#+BEGIN_src go-ts
  // λ ab.aab
  z := func(a λ) λ {
          return func(b λ) λ {
                  return a(a(b))
          }
  }
#+END_SRC

** Let's see what happens when we pass our =inc= function to =x=

#+BEGIN_src go-ts
  e := x(inc) // e = (λ ab.b)inc
#+END_SRC

** We get a function back where any mention of =a= is replaced by =inc=.

#+BEGIN_src go-ts
  e := func(b λ) λ {  // e = λ b.b
          return b
  }
#+END_SRC
- Note, there's no =a= in the returned function, so no =inc=

** If we then evaluate this:

#+BEGIN_src go-ts
  _ = e(nil)       // (λ b.b)nil => nil
  result := get()  // inc is never called, so result = 0
#+END_SRC

** ... we get =0=

* What happens when we pass =inc= to the function =y=?
Remember Y was next in the series! This is it:
#+begin_src go-ts
  y := func(a λ) λ {
          return func(b λ) λ {
                  return a(b)
          }
  }

#+end_src
** we pass it =inc=

#+BEGIN_src go-ts
  e := y(inc)
#+END_SRC

** We get a function back where any mention of =a= is replaced by =inc=.

#+BEGIN_src go-ts
  e := func(b λ) λ {
          return inc(b)
  }
#+END_SRC
- This time =a(b)= was present, so we make it =inc(b)=

** If we then evaluate this:

#+BEGIN_src go-ts
  e(nil)
#+END_SRC

** We'll call inc:
#+BEGIN_src go-ts

  inc := func(f λ) λ {
           i = i + 1
           return f
  }
#+END_SRC

** .. and then calling =get()=
.. will return =1=

* What will happen if we do the same with function =z=?
Reminder: this is =z=
#+BEGIN_src go-ts
  // λ ab.aab
  z := func(a λ) λ {
          return func(b λ) λ {
                  return a(a(b))
          }
  }
#+END_SRC


** That's right!
** We get a =2=

* What have we built here?

** Another way to represent numbers
#+BEGIN_src go-ts
  // 0 = λ ab.b
  func zero(a λ) λ { return func(b λ) λ {return b}}

  // λ ab.ab
  func one(a λ) λ { return func(b λ) λ {return a(b)}}
  
  // λ ab.aab
  func two(a λ) λ { return func(b λ) λ {return a(a(b))}}          
#+END_SRC

** Church numerals!
- We have to accept that these functions are numbers, even without using our =inc= and =get= functions.

** =inc= also demonstrates that these numbers can also be exponents:
#+BEGIN_src go-ts
  n := two(two) // 2**2
  _ = n(inc)
  get() // => 4
  reset()        
  n = two(two)(two) // (2**2)**2  => 4**2
  _ = n(inc)
  get() // => 16
#+END_SRC
** It's a weird name...
- what does this have to do with "church"?
  
* Pop Quiz 2
** Who's this?
[[./alan-turing.jpg]]
**  Alan Turing (1912-1954)
** Creator of the Turing Machine
 - A theoretical, mechanical machine
 - Anything that can be computed, can be computed on a Turing Machine

* Pop Quiz 3
** Who's this?
[[./Alonzo_Church.jpg]]

** Alonzo Church (1903-1995)
- PhD supervisor of Turing
- Invented the lambda calculus 
- Invented Church numerals
  
** Church-Turing Thesis
There is an equivalence!
Anything that can be computed, can be computed using lambda calculus!

[[./Alonzo_Church.jpg]]

* Operations on church numbers
** Successor 
#+BEGIN_src go-ts
  // λ abc.b(abc)
  succ = func(a λ) λ {
      return func(b λ) λ {
          return func(c λ) λ {
             return b(a(b)(c))
          }
       }
  }
#+END_SRC

** Successor to zero
#+BEGIN_src go-ts

  // λ ab.b
  zero := func(x λ) λ { return func(y λ) λ { return y } }

  // s0 = (λ abc.b(abc))(λ ab.b)
  s0 := succ(zero)   
#+END_SRC

** The result of =succ(zero)= is a function where all references to =a= are replaced with =zero=:
#+BEGIN_src go-ts
  s0 := func(b λ) λ {
          return func(c λ) λ {
            return b(zero(b)(c))
        }
  }
#+END_SRC

** What will happen when we evaluate =zero(b)(c)= at the heart of this function?
#+BEGIN_src go-ts
	  zerothB := (func(x λ) λ {
		  return func(y λ) λ {
			  return y
		  }
	  })( b )( c )
	  // parameter x is thrown away
	  zerothB := func(y λ) λ { return y }(c)
	  // So the evaluation resolves to:
	  zerothB := c
#+END_SRC

** so..

#+BEGIN_src go-ts
  s0 := func(b λ) λ {
          return func(c λ) λ {
            return b(c)
        }
 }
#+END_SRC

** What's interesting about this function?

**  That's right!
It's the same as the definition of =one=
#+BEGIN_src go-ts
  one := func(a λ) λ {
          return func(b λ) λ {
            return a(b)
          }
  }
#+END_SRC

* Addition
** We get it for free!
#+BEGIN_src go-ts
  plus := succ
  result := one(plus)(one)
  _ = result(inc)
  get() // => 2        
#+END_SRC

* Okay, soon it'll be time to rest your brain
We'll stop working through things now

** Some lambda forms algorithms to enjoy in your own time :-)
** Multiplication
#+BEGIN_src go-ts
  // λabc.a(bc)
  func mul (a λ) λ {
    return func(b λ) λ {
      return func(c λ) λ {
        return a(b(c))
      }
    }
  }

  four := mul(two)(two)

#+END_SRC

** Boolean logic (True)
#+BEGIN_src go-ts
    // λab.a
    func True(a λ) λ {
            return func(b λ) λ {
                    return a
            }
    }
#+END_SRC

** Boolean logic (False)
#+begin_src go-ts
    // λab.b
    func False(a λ) λ {
            return func(b λ) λ {
                    return b
            }
    }
#+end_src

** Stop and think
If I asked you to create =if= from scratch, without using =if= or =or= how would you do that?

** If Then Else

#+begin_src go-ts
    // λab.a(b)
    func IfThenElse(a λ) λ {
            return func(b λ) λ {
                    return a(b)
            }
    }

  trueOne := IfThenElse(True)(one)(two)
  falseTwo := IfThenElse(False)(one)(two)

#+end_src

* Something subtle
... some lambda forms do more than one thing.

** The implementation of =zero= is identical to =false=
** The implementation of =one= is identical to =IfThenElse=
** Every church numeral is also the exponent function of the same value.

** Complexity arises from the repetitive application of simple forms
- This doesn't stop here.

* Pop Quiz 4
** Who's this?
[[./hofstadter.png]]

** Douglas Hofstadter
- Originator of the "Strange Loop"
- Showed examples of complexity arising from simple patterns applied recursively
- Theorised that animal intelligence might be an example of this

* Recursion
** The famous Y-combinator!
#+BEGIN_SRC
 Y = λf.(λx.f (x x))(λx.f (x x))
#+END_SRC

- This literally allows recursion in a language with no recursion built in
- It calculates "fixed points" of a function provided to it.

** In Go
#+begin_src go-ts
func Y (f λ) λ {
	return func(le λ) λ {
		return func(g λ) λ{
			return g(g)
		}(
			func(h λ) λ {
				return le(func(x λ) λ {
					return h(h)(x)
				})
			},
		)
	}
}
#+end_src

** We can use it to build recursive functions
Factorial
#+begin_src go-ts
// F  = λ f. λ n. cond (isZero n) 1 (Mult n (f (Pred n))
func F(f λ) λ {
	return func(n λ) λ {
		return IfThenElse(IsZero(n))(one)(mul(n)(f(pred(n))))
	}
}
#+end_src

** And call it like this:
#+begin_src go-ts
  fact := Y(F)
  result := fact(zero)
#+end_src

** factorial of zero:
#+begin_src go-ts
  result = fact(zero)
  _ = result(inc)
  get() // => 1
#+end_src
Success!

** factorial of one:
#+begin_src go-ts
  result = fact(one)
#+end_src

Who can guess the output?

** Disaster!
#+begin_src sh
runtime: goroutine stack exceeds 1000000000-byte limit
runtime: sp=0xc0201e03c0 stack=[0xc0201e0000, 0xc0401e0000]
fatal error: stack overflow
#+end_src

** Go is fundamentally limited
** We lack "tail call optimisation"
** It makes stack traces easier to read if you don't overwrite the stack!
** Note: workarounds exist!
  - Trampoline functions, for example.

** If you really want to work this way you'd probably better look at Scheme, Haskell, OCaml, etc..


* What's the point of all this?
** Originally, it answered questions about what was possible.
Turing added the part that made it seem feasible in the *real* world.
... though Konrad Zuse was already working on that :-)

** Now, it gives us important lessons
** Any problem that can be solved in computing can be solved using only functions.
** It's not always easy, and being a purist about it is dumb
... at least in Go
** Functions are the most powerful primitive we have.
... but _purely_ functional programming is not idiomatic Go.
** Technically we don't need types, or generics.
... in practise they're easier to use.
** Closures are genuinely useful
- Closures can abstract state from logic
  - I use them to separate business logic from IO
  - This can simplify testing (another topic, for another day)
** Curried functions are genuinely useful
- We can "partially" evaluate functions
- We can capture a logical state and only do the work when we need it

* What about the notion of the self-aware system?
** This process is possibly isomorphic to how we build functionality in the lambda calculus.
** The re-emergence of simple patterns at different levels of complexity is called a "Strange Loop"
- It's probably easiest to think of this in terms of fractals, or M. C. Escher paintings
[[./Escher.jpg]]  
** Strange Loops cause complex behaviour to emerge from very simply patterns
** Many believe understanding this is the key to unlocking AGI

* The source code:
All of the Go code above, this presentation and more is in my GitHub repository:
[[https://github.com/tealeg/go-lambda-calculus][https://github.com/tealeg/go-lambda-calculus]]

* Further reading:
** On the lambda calculus
- [[https://plato.stanford.edu/entries/lambda-calculus/][The Stanford Encylopedia of Philosophy]]
- [[https://thealmarty.com/2018/08/13/recursion-in-lambda-calculus-the-y-combinator/][Recursion in the Lambda Calculus and the Y-Combinator]]

** If you'd like to know more about Strange Loops
- Read the books of Douglass Hofstadter, this will take you from base
  concepts to the hypothesis of consciousness emerging from strange
  loops.
  - [[https://www.hachettebookgroup.com/titles/douglas-r-hofstadter/godel-escher-bach/9780465026562/][Gödel, Escher, Bach: an Eternal, Golden, Braid]]
  - [[https://www.hachettebookgroup.com/titles/douglas-r-hofstadter/i-am-a-strange-loop/9780465030798/][I am a Strange Loop]]
  
** If you'd like to explore these ideas in a more "appropriate" programming language:
- Your best bet is the "little" books (all Scheme based)
  - [[https://www.penguinrandomhouse.com/books/655814/the-little-schemer-fourth-edition-by-daniel-p-friedman-and-matthias-felleisen/][The Little Schemer]] (From nothing to the Y-Combinator and meta-circular-interpreters)
  - [[https://www.penguinrandomhouse.com/books/655370/the-seasoned-schemer-second-edition-by-daniel-p-friedman-and-matthias-felleisen-drawings-by-duane-bibby-foreword-by-guy-l-steele-jr/][The Seasoned Schemer]] (First class functions, exceptions and state)
** .. and more..     
  - [[https://www.penguinrandomhouse.com/books/657971/the-reasoned-schemer-second-edition-by-daniel-p-friedman-william-e-byrd-oleg-kiselyov-and-jason-hemann-drawings-by-duane-bibby-foreword-by-guy-lewis-steele-jr-and-gerald-jay-sussman-afterwo/9780262535519/][The Reasoned Schemer]] (Logic programming)
  - [[https://www.penguinrandomhouse.com/books/657080/the-little-prover-by-daniel-p-friedman-and-carl-eastlund-drawings-by-duane-bibby-foreword-by-j-strother-moore-afterword-by-matthias-felleisen/9780262527958/][The Little Prover]] (Inductive proof as a mechanism to assert facts about programs)
  - [[https://www.penguinrandomhouse.com/books/657918/the-little-typer-by-daniel-p-friedman-and-david-thrane-christiansen-illustrations-by-duane-bibby-foreword-by-robert-harper-afterward-by-conor-mcbride/9780262536431/][The Little Typer]] (Type Systems)
  - [[https://www.penguinrandomhouse.com/books/727118/the-little-learner-by-daniel-p-friedman-and-anurag-mendhekar-illustrated-by-qingqing-su-foreword-by---guy-l-steele-jr-foreword-by-peter-norvig/9780262546379/][The Little Learner]] (Machine Learning)
  
* The end
[[./endgopher.png]]

